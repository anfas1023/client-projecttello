"use client";
import Sidebar from "@/components/dashboard/Sidebar";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import React, { useEffect, useState } from "react";
import axios from "axios";
import DashboardSetUp from "@/components/dashboard/dashboard-setup";
import { useRouter } from "next/navigation";

import { Toaster } from "@/components/ui/sonner";
import { WorkspaceStore } from "@/store";
import SideNavbar from "@/components/dashboard/SideNav";
import { usePathname } from "next/navigation";
import WorkspcaeSidebar from '../../../components/Workspace-sedebar/Workspace-sidebar'


const inter = Inter({ subsets: ["latin"] });
export type WorkspaceType = {
  workspacename: string;
  userId: string;
  description: string;
  workspaceId:string; 
  _id:string;
};

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [workspace, setWorkSpace] = useState();
  const router=useRouter()
const setWorkspaceName=WorkspaceStore((state)=>state.setWorkspaceName)
const setuserId=WorkspaceStore((state)=>state.setUserId)
const setDescription=WorkspaceStore((state)=>state.setDescription)
const addWorkspace=WorkspaceStore((state)=>state.addWorkspace)
const Workspaces=WorkspaceStore((state)=>state.workspaces)

const pathname = usePathname();
const showSidebar = pathname === '/dashboard';

  useEffect(() => {
    // console.log("in useEffect");
    
    async function fetchWorkspace(userId: string | null) {
      // Corrected typo
      try {
        const response = await axios.get(
          `http://localhost:5000/workspace/getAllWorkspace/${userId}`
        );
        // console.log("response.data",response.data);
        // setWorkSpace(response.data);
        // setWorkspaceName(response.data.workspacename);
        // setuserId(response.data.userId)
        // setDescription(response.data.description)

        response.data.forEach((workspace:WorkspaceType) => {
          addWorkspace({
            workspacename: workspace.workspacename,
            userId: workspace.userId,
            description: workspace.description,
            workspaceId:workspace._id
          });
        });

      } catch (error) {
        console.error("Error fetching workspace:", error);
      }
    }
    const userId = localStorage.getItem("userId");
    if (userId) {
      fetchWorkspace(userId); // Corrected function call
    } else {
      console.error("User ID not found in localStorage");
    }
  }, []);

  // console.log("Workspaces", Workspaces);

  // useEffect(()=>{
  //   if(workspace){
  //     router.push('/dashboard')
  //   }
  // },[workspace])
  const handleUpdate=(data :any)=>{
    setWorkSpace(data)
  }




  useEffect(()=>{

 async function fetchInvitedWorkspace(email:string){

      try {
        const response = await axios.get(
          `http://localhost:5000/workspace/getAllWorkspaceByInvitedMembers/${email}`
        );

        if(response){
          response.data.forEach((workspace:WorkspaceType) => {
            addWorkspace({
              workspacename: workspace.workspacename,
              userId: workspace.userId,
              description: workspace.description,
              workspaceId:workspace._id
            });
          });
        }
      } catch (error) {
        
      }

    }
   const email = localStorage.getItem("email");
   if(email){
    fetchInvitedWorkspace(email)
   }else{
    console.log("No user id");
    
   }
  },[])



  return (
   <>
      <Toaster />
      {!Workspaces[0] ? (
        <div className="bg-zinc-900 h-screen w-screen flex justify-center items-center">
          <DashboardSetUp  onUpdate={handleUpdate}/>
        </div>
      ) : (
        <>
          <div className="flex">
            {showSidebar && <WorkspcaeSidebar workspaceId={Workspaces[0].workspaceId}  />}
            {children}
          </div>
        </>
      )}

</>
  
  );
}
