"use client";
import Sidebar from "@/components/dashboard/Sidebar";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import React, { useEffect, useState } from "react";
import axios from "axios";
import DashboardSetUp from "@/components/dashboard/dashboard-setup";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { Toaster } from "@/components/ui/sonner";
import { WorkspaceStore } from "@/store";
import SideNavbar from "@/components/dashboard/SideNav";
import { usePathname } from "next/navigation";
import WorkspcaeSidebar from "../../../components/Workspace-sedebar/Workspace-sidebar";

// import { cn } from '@/lib/utils';
// import { Loader2 } from 'lucide-react';
import { Spinner } from "@material-tailwind/react";
const inter = Inter({ subsets: ["latin"] });
export type WorkspaceType = {
  workspacename: string;
  userId: string;
  description: string;
  workspaceId: string;
  _id: string;
  inviteMembers: {
    email: string;
    role: string;
    userId: string;
    userName: string;
  }[];
  workspaceOwner: {
    email: string;
    userName: string;
    role: string;
    ownerId: string;
  };
};

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [workspace, setWorkSpace] = useState<WorkspaceType[] | null>(null);
  const router = useRouter();
  const setWorkspaceName = WorkspaceStore((state) => state.setWorkspaceName);
  const setuserId = WorkspaceStore((state) => state.setUserId);
  const setDescription = WorkspaceStore((state) => state.setDescription);
  const addWorkspace = WorkspaceStore((state) => state.addWorkspace);
  const Workspaces = WorkspaceStore((state) => state.workspaces);

  const pathname = usePathname();
  const showSidebar = pathname === "/dashboard";
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    async function fetchUserData() {
      try {
        const response = await axios.get("http://localhost:5000/fetchUser", {
          withCredentials: true,
        });

        if (response.data) {
          localStorage.setItem("userId", response.data.userId);
          localStorage.setItem("email", response.data.email);
          localStorage.setItem("username", response.data.username);
          return;
        }
      } catch (error) {
        if (axios.isAxiosError(error) && error.response?.data) {
          toast.error(error.response.data.error, { position: "top-left" });
        } else {
          console.log("An unexpected error occurred:", error);
        }
      }
    }
    const userId = localStorage.getItem("userId");
    const email = localStorage.getItem("email");
    const username = localStorage.getItem("username");

    if (!userId && !email && !username) {
      fetchUserData();
    }
  }, [router]);

  useEffect(() => {
    async function fetchWorkspace() {
      try {
        setLoading(true);
        console.log("here1");
        const response = await axios.get(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/workspace/getAllWorkspace/`,
          {
            withCredentials: true,
          }
        );

        response.data.forEach((workspace: WorkspaceType) => {
          addWorkspace({
            workspacename: workspace.workspacename,
            userId: workspace.userId,
            description: workspace.description,
            workspaceId: workspace._id,
            inviteMembers: workspace.inviteMembers,
            workpspaceOwner: workspace.workspaceOwner,
          });
        });
        console.log("response1", response.data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching workspace:", error);
        setLoading(false);
      }
    }
    fetchWorkspace();
  }, [addWorkspace]);

  useEffect(() => {
    async function fetchInvitedWorkspace() {
      try {
        setLoading(true);
        console.log("here1");

        const response = await axios.get(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/workspace/getAllWorkspaceByInvitedMembers/`,
          {
            withCredentials: true,
          }
        );

        if (response) {
          response.data.forEach((workspace: WorkspaceType) => {
            addWorkspace({
              workspacename: workspace.workspacename,
              userId: workspace.userId,
              description: workspace.description,
              inviteMembers: workspace.inviteMembers,
              workspaceId: workspace._id,
              workpspaceOwner: workspace.workspaceOwner,
            });
          });
        }

        setLoading(false);
      } catch (error) {
        console.error("Error fetching invited workspaces:", error);
        setLoading(false);
      }
    }

    const email = localStorage.getItem("email");
    fetchInvitedWorkspace();
    console.error("Email not found in localStorage");
  }, [addWorkspace]);

  const handleUpdate = (data: WorkspaceType) => {
    setWorkSpace([data]);
  };

  const [isOpen, setIsOpen] = useState(true);
  const toggleSidebar = () => {
    setIsOpen(!isOpen);
  };

  useEffect(() => {
    const userId = localStorage.getItem("userId");
    if (!userId) {
      router.replace("/login");
    }
  }, [router]);

  return (
    <>
      <Toaster />
      {loading ? (
        <div className=" h-screen bg-workspace-gray flex justify-center items-center">
          {/* <p className="text-white">Loading.</p> */}
          <div
            className="inline-block text-red-700 h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"
            role="status"
          >
            <span className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">
              Loading...
            </span>
          </div>
        </div>
      ) : !Workspaces[0] ? (
        <div className="bg-zinc-900 w-full h-screen flex justify-center items-center">
          <DashboardSetUp onUpdate={handleUpdate} />
        </div>
      ) : (
        <div className="flex">{children}</div>
      )}
    </>
  );
}
